from snakebids import bids, generate_inputs, get_wildcard_constraints

configfile: 'config/snakebids.yml'

# Get input wildcards
inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    validate=not config.get("plugins.validator.skip", False)
)

non_hemi_wcards = inputs["pial"].wildcards.copy()
del non_hemi_wcards["hemi"]

rule sample_on_surface:
    input:
        data=inputs["data"].path,
        pial=inputs["pial"].path,
        wm=inputs["wm"].path,
        midthickness=inputs["midthickness"].path,
    output:
        temp(bids(
            config["output_dir"],
            suffix=config["param"],
            extension=".shape.gii",
            **inputs["pial"].wildcards,
        ))
    container: config["containers"]["workbench"]
    shell:
        """
        wb_command -volume-to-surface-mapping \\
            {input.data} {input.midthickness} {output} \\
            -ribbon-constrained {input.wm} {input.pial}
        """

rule merge_giftis:
    input:
        lh=expand(rules.sample_on_surface.output, allow_missing=True, hemi="L"),
        rh=expand(rules.sample_on_surface.output, allow_missing=True, hemi="R"),
    output:
        bids(
            config["output_dir"],
            suffix=config["param"],
            extension=".dscalar.nii",
            **non_hemi_wcards,
        )
    container: config["containers"]["workbench"]
    shell:
        """
        wb_command -cifti-create-dense-scalar \\
            {output} \\
            -left-metric {input.lh} \\
            -right-metric {input.rh}
        """

rule all:
    input:
        (
            inputs["pial"]
            .filter(subject=inputs["data"]["subject"])
            .expand(rules.merge_giftis.output)
        )
